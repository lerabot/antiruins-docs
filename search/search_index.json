{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ANTIRUINS Engine","text":"<p>Easy to use, pre-compiled 2D game engine for the SEGA Dreamcast and PC.</p> <p>ANTIRUINS engine was initally developped for Fragmented Almanac, a SEGA Dreamcast game released in 2024.  The engine is now free to use, for personal and commercial project, with source corde available on demand.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>2D engine for SEGA Dreamcast and PC using Love2D.</li> <li>Lua programming language.</li> <li>Loads .png and .dtex files with palette support.</li> <li>Spritesheet support.</li> <li>Tiled map support.</li> <li>Sound effect using .wav file.</li> <li>Audio streaming using CDDA and .wav files.</li> <li>Basic collision system.</li> <li>VMU save + load, VMU bitmap display.</li> </ul>"},{"location":"#compatibility","title":"Compatibility","text":"<p>ANTIRUINS has been developped to be used on Linux, but is aiming to be compatible with Windows and MacOS. The <code>make dependency</code> is currently being adapted to MacOS to provide with the necessary tools.</p> <p>ANTIRUINS is shipping with these pre-built binaries for windows:</p> <ul> <li>cdi4dc.exe</li> <li>mkisofs.exe</li> </ul>"},{"location":"#version","title":"Version","text":""},{"location":"#v075-current","title":"v075 - CURRENT","text":"<pre><code>Fixed a bunch of small audio inconsistencies.\nAdded audio.setPan for SFX sounds.\nNo more audio.resume, if you use audio.pause then audio.play it should resume (CDDA and WAV only)\nAdded paletted texture support on Dreamcast. Check the example_palette.lua or read the docs.\nPalette can be loaded as .dtex.pal files or set manually.\nInitial mouse support for the Dreamcast.\nAdded an input tester and fix some bugs when you have more than 1 controller.\n</code></pre>"},{"location":"#v070","title":"v070","text":"<pre><code>Fonts file can now be .png not just .dtex.\nFont resize is much cleaner now.\nTexture filtering using graphics.setTextureFilter()\nChanged the default 0GDTEX image included to a more \u201cgeneric\u201d antiruins one.\nPlaced a bunch of older libraries in an \u201cold\u201d folder\nCurrently writing a simple GUI library.\nTexture flipping now work properly.\nLove2D stuff now matches more closely the Dreamcast visual output. - test it with make love\nCompletely rewrote the tiled map importer.\n</code></pre>"},{"location":"audio/","title":"Audio","text":""},{"location":"audio/#audio","title":"\ud83d\udd0a AUDIO","text":"<p>Note</p> <p>ANTIRUINS supports various audio formats for different use cases.</p>"},{"location":"audio/#audio-type","title":"Audio Type","text":"<p>ANTIRUINS supports the following audio types:</p>"},{"location":"audio/#audiosfx","title":"<code>audio.SFX</code>","text":"<p>Used for short sound samples, one shots, etc. The sound is loaded directly in memory. Must be a .wav file under 65k samples. Can be any sample rate between 8khz and 41 kHz, stero or mono.</p>"},{"location":"audio/#audiowav","title":"<code>audio.WAV</code>","text":"<p>Used for audio streaming. Must be a .wav file.</p>"},{"location":"audio/#audiocdda","title":"<code>audio.CDDA</code>","text":"<p>Used for CDDA audio streaming. Must be a 16-bit 44100 kHz .wav file.</p> <p>Note</p> <p>CDDA files must be places in the music folder. You need to add them to the config.lua file.</p>"},{"location":"audio/#source","title":"Source","text":"<pre><code>local source = {\n  loaded    = false,\n  id        = 0,\n  channel   = -1,\n  volume    = 220, -- 0 to 254\n  isPlaying = false,\n  type      = audio.SFX,\n}\n</code></pre> <p><pre><code>function audio.load(filename, type)\n</code></pre> Loads a .wav file. Returns a source. Type must be audio.SFX, audio.WAV, or audio.CDDA.</p> <p><pre><code>function audio.play(source, volume, loop)\n</code></pre> Plays a source. OPTIONAL: If <code>volume</code> is set, it will override the source volume. OPTIONAL: If <code>loop</code> is true, the audio will loop.  </p> <p><pre><code>function audio.setVolume(source, volume)\n</code></pre> Sets the volume of a playing source.</p> <p><pre><code>function audio.free(source)\n</code></pre> Frees the memory of a loaded source.</p> <p><pre><code>function audio.isPlaying(source)\n</code></pre> Returns true if the source is currently playing.</p> <p><pre><code>function audio.pause(source)\n</code></pre> Pauses the playback of a source.</p> <p><pre><code>function audio.stop(source)\n</code></pre> Stops the playback of a source.</p> <p><pre><code>function audio.setPan(source, pan)\n</code></pre> Sets the pan. 128 is center, 0 is full left, 255 is full right. Only works on SFX type sound.</p>"},{"location":"config/","title":"Config","text":""},{"location":"config/#configure","title":"CONFIGURE","text":"<p>Config.lua holds some configuration for the engine. This is where you define the games you want to load.</p> <pre><code>local config = {\n\n    games = {\n        {dir=\"game_example\", name=\"Example\"},\n        {dir=\"game_tower\",   name=\"Tower\"},\n    },\n\n    -- Default game to load\n    defaultGame = \"Example\",\n\n    -- console output - disable this is you get slowdown using BBA or Serial.\n    console = true,\n\n    -- Path for lackages, libraries. The require function.\n    -- Don't forget to add a semicolom at the end. ' ; '\n    reqPath = \"lua/?.lua;\" .. \"lua/lib/?.lua;\",\n}\n\n-- This isn't part of the config table but it's a good place to put the CDDA songs.\n-- With this global table you'll be able to access the songs from any game.\n-- And ensure compatibility with the LOVE2D renderer.\nCDDA = {\n    song1     = {id = 1, file = \"1-song.wav\"},\n    titleSong = {id = 2, file = \"2-title.wav\"},\n}\n\n\nreturn config\n</code></pre>"},{"location":"graphics/","title":"\ud83d\udd8c\ufe0f GRAPHICS","text":"<p>Note</p> <p>ANTIRUINS uses center coordinate for drawing.</p> <p>Note</p> <p>If you use .dtex files but keep a .png with the same name, the engine will load the .png version when uing the PC renderer.</p>"},{"location":"graphics/#textures","title":"Textures","text":"<p>ANTIRUINS only supports pow2 sized texture from 8px to 1024px.</p> <p>You can load .png files, but they takes some time to decompress, a much better alternative are .dtex file generated by pvrtex and texconv.</p> <pre><code>local TEXTURE = {\n  texture   = id,   -- texture ID used by the C engine\n  filename  = \"\",\n  w, h      = 0, 0,\n  palette   = {     -- if you use paletted texture.\n      index   = 0,\n      size    = 0,\n      colors  = {}\n  }\n}\n</code></pre> <p><pre><code>function graphics.loadTexture(filename)\n</code></pre> Loads a pow2 .png or .dtex image.  Returns a texture.</p> <p><pre><code>function graphics.freeTexture(texture)\n</code></pre> Frees the texture data.</p> <p><pre><code>function graphics.drawTexture(texture, x, y, scaleX, scaleY, angle, uv)\n</code></pre> Draws a texture at x-y position.  OPTIONAL : scaleX and scaleY are floats.  OPTIONAL : angle is represented in degree. OPTIONAL : uv is a table with 4 x 0.0 - 1.0 UV coordinates.  </p>"},{"location":"graphics/#fonts","title":"Fonts","text":"<p>The fonts are loaded as a bitmap font atlas, starting at character 32 (space).  There is a Processing sketch included in the tool folder that can help you generate a font atlas.  You can also find some other fonts in the default folder.</p> <pre><code>local FONT = {\n  texture = 0,  -- texture ID used by the engine \n  charW   = 0,  -- char width\n  size    = 16,\n}\n</code></pre> <p><pre><code>function graphics.loadFont(filename, col, row, fontSize)\n</code></pre> Loads a pow2 .png or .dtex image. Returns a font.</p> <p><pre><code>function graphics.print(text, x, y, center)\n</code></pre> Prints text at x-y position.  If <code>center</code> is true, the text is centered.</p> <p><pre><code>function graphics.setFontSize(fontSize)\n</code></pre> Sets the current font size.</p>"},{"location":"graphics/#palettes","title":"Palettes","text":"<p>The Dreamcast has an internal palette of 1024 colors. You can take advantage of this by using paletted .dtex files. Paletted texture reduce the memory of texture to 50% (8BPP) or 25% (4BPP) compared to RGB images. </p> <p>You can read more on Dreamcast texture format here.</p> <pre><code>local PALETTE = {\n  size    = 16,  --16(4BPP) or 256(8BPP) palette size \n  index   = 0,   --the location of the palette (between 1 and 1024), 0 is no palette.\n  colors  = {},  --table of {r,g,b,a} values (between 0.0 and 1.0)\n}\n</code></pre> <p><pre><code>function graphics.loadPalette(file)\n</code></pre> Returns a palette from a .dtex.pal file.</p> <p><pre><code>function graphics.setPalette(texture, palette)\n</code></pre> Replaces a texture palette with the provided palette.</p> <p><pre><code>function graphics.setPaletteColor(palette, colorNum, r, g, b, a)\n</code></pre> Sets a single color in a specified palette. The <code>r</code> argument can be a {r, g, b, a} table.</p>"},{"location":"graphics/#colors","title":"Colors","text":"<p><pre><code>function graphics.setDrawColor(r, g, b, a)\n</code></pre> Sets the color (0.0 - 1.0) of future textures, shapes, texts, etc. You can also use a {r, g, b, a} table.</p> <p><pre><code>function graphics.setClearColor(r, g, b, a)\n</code></pre> Sets the color (0.0 - 1.0) of the background. You can also use a {r, g, b, a} table.</p>"},{"location":"graphics/#shapes","title":"Shapes","text":"<p><pre><code>function graphics.drawRect(x, y, w, h, mode)\n</code></pre> Draws a rectangle. If <code>mode</code> is \u201ccorners\u201d, x and y become top-left coordinates.</p> <p><pre><code>function graphics.drawCircle(x, y, radius, segements)\n</code></pre> Draws a circle with the specified number of segments.</p> <p><pre><code>function graphics.drawLine(x1, y1, x2, y2, width)\n</code></pre> Draws a line from x1-y1 to x2-y2 with the specified line width.</p>"},{"location":"graphics/#video","title":"Video","text":"<p>ANTIRUINS supports ROQ video files.</p> <p><pre><code>function graphics.playVideo(videoFile, x, y, w, h)\n</code></pre> Plays a video file at the specified position and size.</p>"},{"location":"input/","title":"\ud83c\udfae INPUT","text":"<p>ANTIRUINS supports up to 4 controllers. Mouse support is experimental.</p>"},{"location":"input/#controller-table","title":"Controller Table","text":"<pre><code>local controller = {\n        buttonPressed   = {\n        A = false, B = false, X = false, Y = false, START = false,\n        UP = false, DOWN = false, LEFT = false, RIGHT = false,\n        },\n        lButton         = {},\n        newButton       = nil,\n        deadzone        = 0.2,\n        joy             = maf.vector(0,0),\n        trig            = maf.vector(0,0),\n}\n</code></pre>"},{"location":"input/#button-names","title":"Button names","text":"<pre><code>local buttons = {\"A\", \"B\", \"X\", \"Y\", \"UP\", \"DOWN\", \"LEFT\", \"RIGHT\", \"START\"}\n</code></pre> <p><pre><code>function input.getButton(button, controllerNumber)\n</code></pre> Returns true/false if button has been pressed.</p> <p><pre><code>function input.getButtonDown(button, controllerNumber)\n</code></pre> Returns true/false if button is being held.</p> <p><pre><code>function input.getJoystick(controllerNumber)\n</code></pre> Returns the joystick position as a vector.</p> <p><pre><code>function input.getTriggers(controllerNumber)\n</code></pre> Returns both triggers as a vector.</p> <p><pre><code>function input.getControllerType(controllerNumber)\n</code></pre> Returns the controller type. Controller, Mouse, or Keyboard.</p>"},{"location":"install/","title":"Get started","text":""},{"location":"install/#install","title":"Install","text":"<ol> <li>Download the engine from itch.io and decompress it somewhere on your computer.</li> <li>Run <code>make dependency</code> to install theses tools:  <ul> <li>mkdcdisc</li> <li>lxdream-nitro</li> <li>love2d</li> <li>dc-tools</li> <li>texconv</li> </ul> </li> <li>Make a new game using <code>make new NAME=game_name</code>. Don\u2019t forget to add the game to the config.lua file. </li> </ol>"},{"location":"install/#configure","title":"Configure","text":"<p>Config.lua holds some configuration for the engine. This is where you define the games you want to load.</p> <pre><code>local config = {\n\n    games = {\n        {dir=\"game_example\", name=\"Example\"},\n        {dir=\"game_tower\",   name=\"Tower\"},\n    },\n\n    -- Default game to load\n    defaultGame = \"Example\",\n\n    -- console output - disable this is you get slowdown using BBA or Serial.\n    console = true,\n\n    -- Path for lackages, libraries. The require function.\n    -- Don't forget to add a semicolom at the end. ' ; '\n    reqPath = \"lua/?.lua;\" .. \"lua/lib/?.lua;\",\n}\n\n-- This isn't part of the config table but it's a good place to put the CDDA songs.\n-- With this global table you'll be able to access the songs from any game.\n-- And ensure compatibility with the LOVE2D renderer.\nCDDA = {\n    song1     = {id = 1, file = \"1-song.wav\"},\n    titleSong = {id = 2, file = \"2-title.wav\"},\n}\n\n\nreturn config\n</code></pre>"},{"location":"install/#run-your-game","title":"Run your game","text":""},{"location":"install/#build-romdisk","title":"Build romdisk","text":"<p>Generate romdisk from every folder prefixed with rd_ (rd_assets, rd_level1) in a game folder. <code>make romdisk</code></p>"},{"location":"install/#broadband-adapter-bba","title":"Broadband Adapter (BBA)","text":"<p>Edit your BBA IP address in the Makefile then <code>make bba</code></p>"},{"location":"install/#serial-adapter","title":"Serial Adapter","text":"<p>Edit your serial port in the Makefile then <code>make serial</code></p>"},{"location":"install/#emulator","title":"Emulator","text":"<p>Make sure you have installed the dependencies then <code>make cdi emulator</code></p>"},{"location":"install/#love2d","title":"Love2D","text":"<p>You can test your game on PC using <code>make love</code></p>"},{"location":"sprite/","title":"\ud83d\uddbc\ufe0f SPRITES","text":"<p>The <code>sprite</code> module allows you to create and manipulate sprites using textures. The </p> <p>Note</p>"},{"location":"sprite/#sprite-structure","title":"Sprite Structure","text":"<p>A sprite is represented by a table with the following structure:</p> <pre><code>local SPRITE = {\n  frames    = {},  -- table of frames\n  uvs       = {},  -- table of UV coordinates\n  cFrame    = 1,   -- current frame\n  maxFrame  = 1,   -- maximum number of frames\n  direction = 1,   -- animation direction\n  axis      = {x=1, y=1},  -- axis for scaling\n  texture   = {},  -- texture object\n  timer     = {},  -- timer handle\n  stopAnimation = false,  -- flag to stop animation\n}\n</code></pre>"},{"location":"sprite/#functions","title":"Functions","text":"<p><pre><code>function sprite.new(spritefile, texture, col, row)\n</code></pre> Creates a new sprite. <code>spritefile</code> is the path to the sprite data file. <code>texture</code> is the texture object or path to the texture file. <code>col</code> and <code>row</code> are optional parameters for specifying the number of columns and rows in the sprite sheet. Returns a sprite object.</p> <p><pre><code>function sprite:getCopy()\n</code></pre> Returns a copy of the sprite object.</p> <p><pre><code>function sprite:draw(x, y, frame, sX, sY)\n</code></pre> Draws the sprite at the specified x-y position. <code>frame</code> is the frame number to draw. OPTIONAL: <code>sX</code> and <code>sY</code> are scaling factors.</p> <p><pre><code>function sprite:nextFrame()\n</code></pre> Advances to the next frame in the animation. Returns the current frame number.</p> <p><pre><code>function sprite:loop(speed, startFrom, endFrame)\n</code></pre> Loops the animation from <code>startFrom</code> to <code>endFrame</code> at the specified <code>speed</code>.</p> <p><pre><code>function sprite:play(speed, startFrom, endFrame)\n</code></pre> Plays the animation from <code>startFrom</code> to <code>endFrame</code> at the specified <code>speed</code>.</p> <p><pre><code>function sprite:stop()\n</code></pre> Stops the current animation.</p> <p><pre><code>function sprite:getFrame()\n</code></pre> Returns the current frame number.</p> <p><pre><code>function sprite:free()\n</code></pre> Frees the texture data associated with the sprite.</p> <p><pre><code>function sprite:getSize()\n</code></pre> Returns the width and height of the current sprite frame.</p>"},{"location":"tiled/","title":"\ud83d\uddfa\ufe0f Tiled","text":"<p>Tiled is a free and open-source map editor used for creating 2D maps. This module allows you to load and render maps created with Tiled.</p> <p>Note</p> <p>Currently, ANTIRUINS can only display around 500 sprites at 60fps. I suggest you export all the \"static\" objects as a single texture and user it in conjuction with <code>renderObjects</code></p> <pre><code>local MAP = {\n    tileSize    = 16,                       -- size of the tiles in the map\n    scale       = 1,                        -- scale at which the map will be rendered\n    width       = tileSize * map.width,     -- calculated from the loaded map.\n    height      = tileSize * map.height,    -- calculated from the loaded map.\n    layers      = {}\n    colliders   = {}\n}\n\nlocal LAYER = {\n    objects     = {}, -- object data\n    drawables   = {}, -- drawable information {gid, x, y, flipX, flipY}\n    color       = {1,1,1,1},\n    visible     = true,\n    name        = \"layerName\",\n}\n\n-- This is the tabled used for each objects in objects layers.\nlocal OBJECTS = {\n    x           = 0,\n    y           = 0,\n    ox,         = 0,            -- orignal x\n    oy          = 0,            -- orignal y\n    w           = 0,\n    h           = 0,\n    name        = \"objectName\",\n    type        = \"objectType\", -- equivalent to class in Tiled\n    gid         = 0,            -- sprite id\n    visible     = true,\n    properties  = {},\n    spritesheet = nil,\n    color       = {1,1,1,1},\n    scale       = 1\n}\n</code></pre>"},{"location":"tiled/#loading-maps","title":"Loading Maps","text":"<p><pre><code>function tiled2.load(file, spritesheet)\n</code></pre> Loads a Tiled map from a file and an optional spritesheet. Returns a map object.</p>"},{"location":"tiled/#rendering","title":"Rendering","text":"<p><pre><code>function tiled2:render(layerToRender)\n</code></pre> Renders the specified layer. If no layer is specified, renders all layers.</p> <p><pre><code>function tiled2:renderObjects()\n</code></pre> Renders all objects in the map.</p> <p><pre><code>function tiled2:createBatch()\n</code></pre> Creates a batch for optimized rendering.</p> <p><pre><code>function tiled2:renderBatch(x, y)\n</code></pre> Renders the batch at the specified position.</p>"},{"location":"tiled/#layers","title":"Layers","text":"<p><pre><code>function tiled2:getLayer(name)\n</code></pre> Returns the layer with the specified <code>name</code>.</p>"},{"location":"tiled/#objects","title":"Objects","text":"<p><pre><code>function tiled2:getObject(name)\n</code></pre> Returns the object with the specified <code>name</code>.</p> <p><pre><code>function tiled2:getObjects(class)\n</code></pre> Returns all objects of the specified <code>class</code>. If no class is specified, returns all objects.</p> <p><pre><code>function tiled2:addObject(obj, layer)\n</code></pre> Adds an object to the specified <code>layer</code>. If no layer is specified, adds to the first layer.</p> <p><pre><code>function tiled2:removeObject(name)\n</code></pre> Removes the object with the specified <code>name</code>.</p>"},{"location":"tiled/#utilities","title":"Utilities","text":"<p><pre><code>function tiled2:free()\n</code></pre> Frees the resources used by the map.</p> <p><pre><code>function tiled2:getTile(gid)\n</code></pre> Returns the real GID of a tile, considering flip flags.</p> <p>Note</p> <p>This is required to get the proper tiles ID if your flipped some sprites in Tiled. is flipped.</p> <p><pre><code>function tiled2:getFlip(gid)\n</code></pre> Returns the flip flags and real GID of a tile.</p>"},{"location":"utilities/","title":"\ud83d\udee0\ufe0f UTILITIES","text":"Functions Description findFile(filename) Returns a path if the filename is found on the /cd, /rd, /pc and or in the loaded game folder. getUS() Returns the current microseconds since game as started. getMS() Returns the current millisecond since game as started. getFPS() Returns the current frame per seconds. mountRomdisk(fileName, mountpoint) Mount a romdisk at specified mountpoint. The most common mountpoint is \u201c/rd\u201d unmountRomdisk(mountpoint) Unmount the specified mountpoint and frees up memory."},{"location":"vmu/","title":"VMU","text":""},{"location":"vmu/#vmu","title":"\ud83d\udcbe VMU","text":"<p>Note</p> <p>The VMU (Visual Memory Unit) is used for saving game data and displaying animations.</p>"},{"location":"vmu/#save","title":"Save","text":"<pre><code>Keep these in mind when you create a new savefile:\n    gameName  - 16 character long.\n    saveName  - 26 character long.\n    descShort - 16 character long.\n    descLong  - 32 character long.\n    saveID    - from 1 to 3.\n\nYou should be able to save just about any Lua table on the VMU.\n</code></pre> <p><pre><code>function vmu.checkForVMU()\n</code></pre> Check if there is a valid VMU present.</p> <p><pre><code>function vmu.initSavefile(gameName, saveName, descLong, descShort, saveID)\n</code></pre> Initializes a save file with the specified parameters.</p> <p><pre><code>function vmu.checkForSave(saveID)\n</code></pre> Check if a save file exists with the specified <code>saveID</code>.</p> <p><pre><code>function vmu.saveGame(saveID, data)\n</code></pre> Save the <code>data</code> table in the specified <code>saveID</code>. <code>data</code> can be any valid Lua Table.</p> <p><pre><code>function vmu.loadGame(saveID)\n</code></pre> Returns a <code>data</code> table from the specified <code>saveID</code>.</p> <p><pre><code>function vmu.deleteGame(saveID)\n</code></pre> Deletes the save file with the specified <code>saveID</code>.</p>"},{"location":"vmu/#vmu-animation","title":"VMU Animation","text":"<p>To display images on the VMU, you need to create \u201canimations\u201d. These animations can be 1 frame long (static).   </p> <pre><code>local ANIMATION = {\n    icon      = {},  -- image data\n    cFrame    = 1,   -- current frame displayed\n    length    = frameNum or 1,\n    speed     = speed or 1,\n    priority  = priority or 1,\n    active    = false,\n    filename  = filename,\n}\n</code></pre> <p><pre><code>function vmu.createAnimation(filename, frameNum, speed, priority)\n</code></pre> Returns an animation. <code>frameNum</code> is the number of frames in the animation. Use 1 for static images.If you have multiple frame, make sure the files are named <code>filename1.bin</code>, <code>filename2.bin</code>, etc. </p> <p><pre><code>function vmu.setScreen(animation, frame)\n</code></pre> Displays the <code>frame</code> (integer) of the specified <code>animation</code>.</p> <p><pre><code>function vmu.playAnimation(animation, repeats, clearAfter)\n</code></pre> Displays an animation for the specified number of <code>repeats</code>. If <code>clearAfter</code> is true, the VMU image will be cleared once the animation is done.</p> <p><pre><code>function vmu.clearScreen()\n</code></pre> Clears the VMU screen.</p> <p><pre><code>function vmu.freeAnimation(animation)\n</code></pre> Frees the memory of the animation.</p>"}]}